https://bugs.gentoo.org/918717

allow r0X.Y revision numbers in prefix

--- a/lib/portage/versions.py
+++ b/lib/portage/versions.py
@@ -53,7 +53,9 @@
 _pkg = r"[\w+][\w+-]*?"
 
 _v = r"(\d+)((\.\d+)*)([a-z]?)((_(pre|p|beta|alpha|rc)\d*)*)"
-_rev = r"\d+"
+# PREFIX_LOCAL hack: -r(\d+) -> -r(\d+|\d+\.\d+) (see below)
+_rev = r"(\d+|\d+\.\d+)"
+# END_PREFIX_LOCAL
 _vr = _v + "(-r(" + _rev + "))?"
 
 _cp = "(" + _cat + "/" + _pkg + "(-" + _vr + ")?)"
@@ -252,15 +254,47 @@
             if rval:
                 return rval
 
-    # the suffix part is equal to, so finally check the revision
+    # PREFIX_LOCAL
+    # The suffix part is equal too, so finally check the revision
+    # Prefix hack: historically a revision starting with 0 was an
+    # 'inter-revision', which means that it is possible to create
+    # revisions on revisions.  An example is -r01.1 which is the
+    # first revision of -r1.  Note that a period (.) is used to
+    # separate the real revision and the secondary revision number.
+    # In the current state, the leading 0 is no longer used, and
+    # versions just can have a dot, which means the version is an
+    # inter-revision.
+    # This trick is in use to allow revision bumps in ebuilds synced
+    # from the main tree for Prefix changes, while still staying in
+    # the main tree versioning scheme.  As such it can be used in
+    # any other overlay where ebuilds from the another tree are
+    # shadowed.
     if match1.group(9):
-        r1 = int(match1.group(9))
+        if '.' in match1.group(9):
+            t = match1.group(9).split(".")
+            r1 = int(t[0])
+            r3 = int(t[1])
+        else:
+            r1 = int(match1.group(9))
+            r3 = 0
     else:
         r1 = 0
+        r3 = 0
     if match2.group(9):
-        r2 = int(match2.group(9))
+        if '.' in match2.group(9):
+            t = match2.group(9).split(".")
+            r2 = int(t[0])
+            r4 = int(t[1])
+        else:
+            r2 = int(match2.group(9))
+            r4 = 0
+    # END_PREFIX_LOCAL
     else:
         r2 = 0
+        r4 = 0
+    if r1 == r2 and (r3 != 0 or r4 != 0):
+        r1 = r3
+        r2 = r4
     rval = (r1 > r2) - (r1 < r2)
     return rval
 
